#!/usr/bin/env python

import argparse
import os
import pwd
import sys

import tds.commands

from tds.cmdline import parser_info
from tds.exceptions import AccessError


# For the deployment methods, determine user executing
# the command line calling the methods
user = pwd.getpwuid(os.getuid()).pw_name


def create_subparsers(parser):
    """ """

    data = parser_info()

    cmd_parsers = parser.add_subparsers(dest='command_name',
                                        help='command help')

    for cmd, cmd_data in data.iteritems():
        cmd_parser = cmd_parsers.add_parser(cmd)

        subparsers = cmd_parser.add_subparsers(dest='subcommand_name',
                                               help='subcommand help')

        for subcmd, subcmd_data in cmd_data.iteritems():
            subcmd_parser = subparsers.add_parser(subcmd,
                                                  help=subcmd_data['help'])

            for args, kwargs in subcmd_data['subargs'].iteritems():
                subcmd_parser.add_argument(*args, **kwargs)


def parse_command_line():
    """ """

    parser = argparse.ArgumentParser(description='TagOps Deployment System')

    parser.add_argument('-v', '--verbose', help='Show more information')
    # If we want multiple verbose levels, use next line instead
    #parser.add_argument('-v', '--verbose', action='count')
    parser.add_argument('--dbuser', help='Specify user to use to connect '
                                         'to TagOpsDB',
                                    default=None)

    create_subparsers(parser)

    # Temporary reference info, not meant to be used
    #create_subparser(parser_tagconfig,
    #                 { 'add' : ('env', 'revision'),
    #                   'push' : ('env', 'revision', 'apptype'), })

    return parser.parse_args()


if __name__ == '__main__':
    args = parse_command_line()
    args.user = user   # Pass user through with arguments
    print "args are: %s" % args   # Remove once main code is written
    cmd = getattr(tds.commands, args.command_name.capitalize())()

    try:
        getattr(cmd, args.subcommand_name.replace('-', '_'))(args)
    except AccessError:
        print 'Your account (%s) does not have the appropriate permissions' \
              '\nto run the requested command.' % user
        sys.exit(1)
    except NotImplementedException, e:
        print e
        sys.exit(1)
