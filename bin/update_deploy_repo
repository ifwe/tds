#!/usr/bin/env python.26

import ConfigParser
import os
import os.path
import shutil
import subprocess
import sys
import time

import daemonize

from tagopsdb.exceptions import RepoException


class ExtCommandError(Exception):
    pass


def run_command(cmd):
    """Wrapper to run external command"""

    cmdline = ' '.join(cmd)
    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE,
                                 stderr=subprocess.PIPE)

    stdout, stderr = proc.communicate()

    if proc.returncode:
        raise ExtCommandError('Command "%s" failed:\n%s' % (cmdline, stderr))

    return stdout


def prepare_rpms(incoming_dir, process_dir, files):
    """Move RPMs in incoming directory to the processing directory"""

    for rpm in files:
        try:
            src_rpm = os.path.join(incoming_dir, rpm)
            shutil.move(src_rpm, process_dir)
        except IOerror, e:
            raise RepoException('Unable to move file "%s" to "%s": %s'
                                % (src_rpm, process_dir, e))


def update_repo(repo_dir, process_dir):
    """Copy RPMs in processing directory to the repository and run
       update the repo
    """

    invalid_rpms = []
    rpms_to_process = [ os.path.join(process_dir, f)
                        for f in os.listdir(process_dir) ]

    for rpm_to_process in rpms_to_process:
        # TODO: ensure package is valid (security purposes)

        cmd = [ 'rpm', '-qp', '--queryformat', '%{arch}', rpm_to_process ]

        try:
            arch_type = run_command(cmd)
        except ExtCommandError, e:
            invalid_rpms.append(rpm_to_process)
            daemonize.logging.error(e)
            continue

        try:
            dest_dir = os.path.join(repo_dir, arch_type)
            shutil.copy(rpm_to_process, dest_dir)
        except IOerror, e:
            raise RepoException('Unable to copy file "%s" to "%s": %s'
                                % (queued_rpm, dest_dir, e))

    try:
        run_command([ 'make', '=C', repo_dir ])
    except ExtCommandError, e:
        raise RepoException(e)

    for rpm_to_process in rpms_to_process:
        if rpm_to_process not in invalid_rpms:
            os.unlink(rpm_to_process)


def main():
    """Read configuration file and get relavent information, then try to
       process files in the incoming directory
    """

    try:
        with open('/etc/tagops/deploy.conf') as conf_file:
            config = ConfigParser.SafeConfigParser()
            config.readfp(conf_file)
    except IOError, e:
        raise RepoException('Unable to access the configuration file '
                            '/etc/tagops/deploy.conf: %s ' % e)

    try:
        repo_dir = config.get('yum', 'repo_location')
        incoming_dir = config.get('yum', 'incoming')
        process_dir = config.get('yum', 'proccessing')
    except ConfigParser.NoOptionError, e:
        raise RepoException('Failed to get configuration information: %s' % e)

    while True:
        files = os.listdir(incoming_dir)

        if files:
            prepare_rpms(incoming_dir, process_dir, files)
            update_repo(repo_dir, process_dir)

        time.sleep(1.0)


def safe_main():
    """A wrapper for the main process to ensure any unhandled
       exceptions are logged before the daemon exits
    """

    try:
        main()
    except:
        exctype, value = sys.exc_info()[:2]
        e = "Unhandled exception: %s.  Daemon exiting." % value
        daemonize.logging.error(e)
        sys.exit(1)


pid = '/var/run/update_deploy_repo.pid'
logfile = '/var/log/update_deploy_repo.log'

daemonize.start(safe_main, pid, logfile)
