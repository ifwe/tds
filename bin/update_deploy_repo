#!/usr/bin/env python2.6

import ConfigParser
import os
import socket
import subprocess
import sys

import beanstalkc
import daemonize

from tagopsdb.exceptions import RepoException


def update_repo():
    """ """

    host = socket.gethostname()

    try:
        with open('/etc/tagops/deploy.conf') as conf_file:
            config = ConfigParser.SafeConfigParser()
            config.readfp(conf_file)
    except IOError, e:
        raise RepoException('Unable to access the configuration file '
                            '/etc/tagops/deploy.conf: %s ' % e)

    try:
        repo_dir = config.get('yum', 'repo_location')
    except ConfigParser.NoOptionError, e:
        raise RepoException('Failed to get configuration information: %s' % e)

    try:
        os.chdir(repo_dir)
    except OSError, e:
        raise RepoException('Unable to change to directory "%s" on host '
                            '"%s": %s' % (repo_dir, host, e))

    # Try to update the yum repo
    cmd = ['make']
    cmdline = ' '.join(cmd)

    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE,
                                 stderr=subprocess.PIPE)

    stdout, stderr = proc.communicate()

    if proc.returncode:
        raise RepoException('Command "%s" failed on host "%s": %s'
                            % (cmdline, host, stderr))


def main():
    """ """

    update_queue = 'tds.package.update'
    error_queue = 'tds.package.error'

    # Initialize beanstalk connection, set up use and watch tubes
    beanstalk = beanstalkc.Connection(host='tong01.tagged.com', port=11300)
    beanstalk.use(error_queue)
    beanstalk.watch(update_queue)
    beanstalk.ignore('default')

    while True:
        job = beanstalk.reserve()
        daemonize.logging.info("Received: %s" % job.body)

        try:
            bean_id = None
            bean_id, body = job.body.split(' ')

            if body != 'updaterepo':
                raise ValueError
        except ValueError:
            daemonize.logging.error('Invalid message in queue %s: %s'
                                    % (update_queue, job.body))
            job.delete()

            if bean_id is not None:
                beanstalk.put('%s ERROR Invalid message in queue %s: %s'
                              % (bean_id, update_queue, job.body))

            continue

        try:
            update_repo()
        except RepoException, e:
            daemonize.logging.error(e)
            job.delete()
            beanstalk.put('%s ERROR Queue %s: %s'
                          % (bean_id, update_queue, e))
            continue

        # All good, just delete job and notify client
        job.delete()
        beanstalk.put('%s OK Operation successful' % bean_id)


def safe_main():
    """ """

    try:
        main()
    except:
        exctype, value = sys.exc_info()[:2]
        e = "Unhandled exception: %s.  Daemon exiting." % value
        daemonize.logging.error(e)
        sys.exit(1)


pid = '/var/run/update_deploy_repo.pid'
logfile = '/var/log/update_deploy_repo.log'

daemonize.start(safe_main, pid, logfile)
