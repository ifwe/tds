#!/usr/bin/env python2.6

import ConfigParser
import os.path
import socket
import sys

import beanstalkc
import daemonize
import sqlalchemy.orm.exc

from tagopsdb.database import init_session
from tagopsdb.database.meta import Session
from tagopsdb.exceptions import RepoException

import tagopsdb.deploy.repo as repo


# Used to create beanstalk copy queue and message info
host = socket.gethostname()


def copy_package_to_repo(name, version):
    """ """

    try:
        with open('/etc/tagops/deploy.conf') as conf_file:
            config = ConfigParser.SafeConfigParser()
            config.readfp(conf_file)
    except IOError, e:
        raise RepoException('Unable to access the configuration file '
                            '/etc/tagops/deploy.conf: %s ' % e)

    try:
        db_user = config.get('db', 'user')
        db_password = config.get('db', 'password')
    except ConfigParser.NoOptionError, e:
        raise RepoException('Failed to get configuration information: %s' % e)

    init_session(db_user, db_password)

    try:
        app = repo.list_app_location(name)
    except sqlalchemy.orm.exc.NoResultFound:
        raise RepoException('Application "%s" to not available in '
                            'PackageLocations table' % name)

    try:
        build_base = config.get('repo', 'build_base')
        repo_mountpoint = config.get('repo', 'repo_mountpoint')
    except ConfigParser.NoOptionError, e:
        raise RepoException('Failed to get configuration information: %s' % e)

    src_rpm = os.path.join(build_base, app.path, '%s.rpm' % app.pkg_name)
    dest_dir = repo_mountpoint  # May be more complex later, keeping
                                # simple assignment

    try:
        shutil.copy(src_rpm, dest_dir)
    except IOError, e:
        raise RepoException('Unable to copy file "%s" to "%s" on host "%s": '
                            '%s' % (src_rpm, dest_dir, host, e))


def main():
    """ """

    copy_queue = 'tds.package.copy.%s' % host
    update_queue = 'tds.package.update'
    error_queue = 'tds.package.error'

    # Initialize beanstalk connection, set up use and watch tubes
    beanstalk = beanstalkc.Connection(host='tong01.tagged.com', port=11300)
    beanstalk.use(error_queue)
    beanstalk.watch(copy_queue)
    beanstalk.ignore('default')

    while True:
        job = beanstalk.reserve()
        daemonize.logging.info("Received: %s" % job.body)

        try:
            bean_id, name, version = job.body.split(' ')
        except ValueError:
            daemonize.logging.error('Invalid message in queue %s: %s'
                                    % (copy_queue, job.body))
            job.delete()
            beanstalk.put('%s ERROR Invalid message in queue %s: %s'
                          % (bean_id, copy_queue, job.body))
            continue

        try:
            copy_package_to_repo(name, version)
        except RepoException, e:
            daemonize.logging.error(e)
            job.delete()
            beanstalk.put('%s ERROR Queue %s: %s' % (bean_id, copy_queue, e))
            continue

        # All good, just delete job
        job.delete()

        # Send update repo request to server
        beanstalk.use(update_queue)
        beanstalk.put('%s updaterepo' % bean_id)
        beanstalk.use(error_queue)


def safe_main():
    """ """

    try:
        main()
    except:
        exctype, value = sys.exc_info()[:2]
        e = "Unhandled exception: %s.  Daemon exiting." % value
        daemonize.logging.error(e)
        sys.exit(1)


pid = '/var/run/manage_deploy_rpms.pid'
logfile = '/var/log/manage_deploy_rpms.log'

daemonize.start(safe_main, pid, logfile)
